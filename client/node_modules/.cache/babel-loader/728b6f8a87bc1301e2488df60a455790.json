{"ast":null,"code":"var _jsxFileName = \"/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stats(_ref) {\n  _s();\n\n  let {\n    entityConfig\n  } = _ref;\n  const {\n    stats,\n    normalQueryName\n  } = entityConfig;\n  const {\n    data,\n    status,\n    isSuccess\n  } = useQuery(normalQueryName, entityConfig.fetchAll);\n\n  const filterBoolean = (field, value) => {\n    //@ts-ignore\n    return data.filter(e => e[field] === value);\n  };\n\n  const getSet = field => {\n    const arr = []; //@ts-ignore\n\n    data.map(e => {\n      if (e[field]) {\n        arr.push(e[field]);\n      }\n    });\n    return Array.from(new Set(arr));\n  };\n\n  const getMostFrequent = arr => {\n    const filteredArray = arr.filter(e => e !== undefined);\n\n    if (filteredArray.length > 0) {\n      const hashmap = filteredArray.reduce((acc, val) => {\n        //@ts-ignore\n        acc[val] = (acc[val] || 0) + 1;\n        return acc;\n      }, {}); //@ts-ignore\n\n      return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b);\n    }\n  };\n\n  const getEarliestDate = dates => {\n    //@ts-ignore\n    return dates.sort(function (a, b) {\n      //@ts-ignore\n      return Date.parse(a) > Date.parse(b);\n    })[0];\n  };\n\n  const getTop = targetField => {\n    let targetArray = [];\n    data.map(e => {\n      //@ts-ignore\n      return targetArray.push(e[targetField]);\n    });\n    return getMostFrequent(targetArray);\n  };\n\n  const getPercentage = (field, value) => {\n    const filteredData = data.filter(e => {\n      //@ts-ignore\n      return e[field] === value;\n    });\n    return filteredData.length / data.length * 100;\n  };\n\n  const extractNestedFieldArray = field => {\n    const array = [];\n    data.map(el => {\n      //@ts-ignore\n      el[field].forEach(subElement => {\n        return array.push(subElement.name);\n      });\n    });\n    return array;\n  };\n\n  const getNestedFieldWithMostByField = (mostField, byField, byValue) => {\n    let resultArray = [];\n    data.filter(e => {\n      //@ts-ignore\n      return e[byField] === byValue;\n    }).map(filteredEl => {\n      //@ts-ignore\n      filteredEl[mostField].forEach(element => {\n        return resultArray.push(element.name);\n      });\n    });\n    return getMostFrequent(resultArray);\n  };\n\n  const getFieldWithMostByTopField = (getField, byField) => {\n    const topValue = getTop(byField);\n    let resultArray = [];\n    data.filter(e => {\n      //@ts-ignore\n      return e[byField] === topValue;\n    }).map(filteredEl => {\n      //@ts-ignore\n      return filteredEl[getField] && resultArray.push(filteredEl[getField]);\n    });\n    return getMostFrequent(resultArray);\n  };\n\n  const renderResult = function (comparisonType) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [''];\n\n    switch (comparisonType) {\n      case 'getDataSize':\n        return data.length;\n\n      case 'getAmount':\n        return getSet(args[0]).length;\n\n      case 'getFilterBooleanAmount':\n        return filterBoolean(args[0], args[1]).length;\n\n      case 'getTop':\n        return getTop(args[0]);\n\n      case 'getEarliestDate':\n        return getEarliestDate(getSet(args[0]));\n\n      case 'getNestedFieldWithMostByField':\n        return getNestedFieldWithMostByField(args[0], args[1], args[2]);\n\n      case 'getFieldWithMostByTopField':\n        return getFieldWithMostByTopField(args[0], args[1]);\n\n      case 'getPercentage':\n        return getPercentage(args[0], args[1]) + '%';\n\n      case 'getMostFrequentNestedArray':\n        return getMostFrequent(extractNestedFieldArray(args[0]));\n\n      default:\n        return comparisonType;\n    }\n  };\n\n  if (status === 'loading') return /*#__PURE__*/_jsxDEV(\"h6\", {\n    children: 'Loading stats...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 38\n  }, this);\n  if (status === 'error') return /*#__PURE__*/_jsxDEV(\"h6\", {\n    children: 'Error loading stats'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 36\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-between p-5\",\n    children: isSuccess && (stats === null || stats === void 0 ? void 0 : stats.map(statGroup => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: statGroup.divClass,\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: statGroup.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group\",\n          children: statGroup.statsList.map(stat => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [stat.description + ' ', \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: renderResult(stat.comparisonType, stat.comparisonArgs)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, this)]\n            }, 1, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 24\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Stats, \"ATPq03CP5uGupgP6Jcrj0kBQMhY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Stats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["React","useQuery","Stats","entityConfig","stats","normalQueryName","data","status","isSuccess","fetchAll","filterBoolean","field","value","filter","e","getSet","arr","map","push","Array","from","Set","getMostFrequent","filteredArray","undefined","length","hashmap","reduce","acc","val","Object","keys","a","b","getEarliestDate","dates","sort","Date","parse","getTop","targetField","targetArray","getPercentage","filteredData","extractNestedFieldArray","array","el","forEach","subElement","name","getNestedFieldWithMostByField","mostField","byField","byValue","resultArray","filteredEl","element","getFieldWithMostByTopField","getField","topValue","renderResult","comparisonType","args","statGroup","divClass","title","statsList","stat","description","comparisonArgs"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx"],"sourcesContent":["import React from 'react'\nimport { useQuery } from 'react-query'\nimport { EntityConfig, FieldConfig, FunctionType } from '../config/main/schema'\ntype StatsProps = {\n    entityConfig: EntityConfig\n}\n\nexport default function Stats({ entityConfig }: StatsProps) {\n    const { stats, normalQueryName } = entityConfig\n    const { data, status, isSuccess } = useQuery<unknown>(normalQueryName, entityConfig.fetchAll)\n\n    const filterBoolean = (field: string, value: boolean) => {\n        //@ts-ignore\n        return data.filter((e) =>\n            e[field] === value\n        )\n    }\n\n    const getSet = (field: string) => {\n        const arr: any[] = []\n        //@ts-ignore\n        data.map(e => {\n            if (e[field]) {\n                arr.push(e[field])\n            }\n        }\n        )\n        return Array.from(new Set(arr))\n    }\n    const getMostFrequent = (arr: string[]) => {\n        const filteredArray = arr.filter(e => e !== undefined)\n        if (filteredArray.length > 0) {\n            const hashmap = filteredArray.reduce((acc, val) => {\n                //@ts-ignore\n                (acc)[val] = (acc[val] || 0) + 1\n                return acc\n            }, {})\n            //@ts-ignore\n            return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b)\n        }\n    }\n\n    const getEarliestDate = (dates: Array<Date>) => {\n        //@ts-ignore\n        return dates.sort(function (a, b) {\n            //@ts-ignore\n            return Date.parse(a) > Date.parse(b);\n        })[0];\n    }\n\n    const getTop = (targetField: string) => {\n        let targetArray: string[] = [];\n\n        (data as unknown[]).map(e => {\n            //@ts-ignore\n            return targetArray.push(e[targetField])\n        });\n        return getMostFrequent(targetArray)\n    }\n\n\n    const getPercentage = (field: string, value: string) => {\n        const filteredData = (data as unknown[]).filter((e) => {\n            //@ts-ignore\n            return e[field] === value\n        })\n        return filteredData.length / (data as unknown[]).length * 100\n    }\n\n    const extractNestedFieldArray = (field: string) => {\n        const array: any[] = [];\n        (data as unknown[]).map((el) => {\n            //@ts-ignore\n            el[field].forEach((subElement) => {\n                return array.push((subElement.name))\n            });\n\n        })\n        return array\n    }\n\n    const getNestedFieldWithMostByField = (mostField: string, byField: string, byValue: any) => {\n        let resultArray: string[] = [];\n        (data as unknown[]).filter((e) => {\n            //@ts-ignore\n            return e[byField] === byValue\n        }).map((filteredEl) => {\n            //@ts-ignore\n            filteredEl[mostField].forEach((element) => {\n                return resultArray.push((element.name))\n            });\n\n        })\n        return getMostFrequent(resultArray)\n    }\n\n    const getFieldWithMostByTopField = (getField: string, byField: string) => {\n        const topValue = getTop(byField)\n        let resultArray: string[] = [];\n\n        (data as FieldConfig[]).filter((e) => {\n            //@ts-ignore\n            return e[byField] === topValue\n        }).map(filteredEl => {\n            //@ts-ignore\n            return filteredEl[getField] && resultArray.push(filteredEl[getField])\n        });\n        return getMostFrequent(resultArray)\n    }\n\n    const renderResult = (comparisonType: FunctionType, args: any[] = ['']) => {\n        switch (comparisonType) {\n            case 'getDataSize':\n                return (data as unknown[]).length\n\n            case 'getAmount':\n                return getSet(args[0]).length\n\n            case 'getFilterBooleanAmount':\n                return filterBoolean(args[0], args[1]).length\n\n            case 'getTop':\n                return getTop(args[0])\n\n            case 'getEarliestDate':\n                return getEarliestDate((getSet(args[0]) as unknown as Date[]))\n\n            case 'getNestedFieldWithMostByField':\n                return getNestedFieldWithMostByField(args[0], args[1], args[2])\n\n            case 'getFieldWithMostByTopField':\n                return getFieldWithMostByTopField(args[0], args[1])\n\n            case 'getPercentage':\n                return getPercentage(args[0], args[1]) + '%'\n\n            case 'getMostFrequentNestedArray':\n                return getMostFrequent(extractNestedFieldArray(args[0]))\n\n            default:\n                return comparisonType\n        }\n    }\n\n    if (status === 'loading') return <h6>{'Loading stats...'}</h6>\n    if (status === 'error') return <h6>{'Error loading stats'}</h6>\n    return (\n        <div className=\"d-flex justify-content-between p-5\">\n            {isSuccess && stats?.map(statGroup => {\n                return <div className={statGroup.divClass}>\n                    <h5>\n                        {statGroup.title}\n                    </h5>\n                    <ul className=\"list-group\">\n                        {statGroup.statsList.map(stat => {\n                            return <li key={1} className=\"list-group-item\">\n                                <span>{stat.description + ' '} </span>\n                                <strong>{\n                                    renderResult(stat.comparisonType, stat.comparisonArgs)\n                                }\n                                </strong>\n                            </li>\n                        })}\n\n                    </ul>\n                </div>\n            })}\n        </div>\n    )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAMA,eAAe,SAASC,KAAT,OAA6C;EAAA;;EAAA,IAA9B;IAAEC;EAAF,CAA8B;EACxD,MAAM;IAAEC,KAAF;IAASC;EAAT,IAA6BF,YAAnC;EACA,MAAM;IAAEG,IAAF;IAAQC,MAAR;IAAgBC;EAAhB,IAA8BP,QAAQ,CAAUI,eAAV,EAA2BF,YAAY,CAACM,QAAxC,CAA5C;;EAEA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAgBC,KAAhB,KAAmC;IACrD;IACA,OAAON,IAAI,CAACO,MAAL,CAAaC,CAAD,IACfA,CAAC,CAACH,KAAD,CAAD,KAAaC,KADV,CAAP;EAGH,CALD;;EAOA,MAAMG,MAAM,GAAIJ,KAAD,IAAmB;IAC9B,MAAMK,GAAU,GAAG,EAAnB,CAD8B,CAE9B;;IACAV,IAAI,CAACW,GAAL,CAASH,CAAC,IAAI;MACV,IAAIA,CAAC,CAACH,KAAD,CAAL,EAAc;QACVK,GAAG,CAACE,IAAJ,CAASJ,CAAC,CAACH,KAAD,CAAV;MACH;IACJ,CAJD;IAMA,OAAOQ,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQL,GAAR,CAAX,CAAP;EACH,CAVD;;EAWA,MAAMM,eAAe,GAAIN,GAAD,IAAmB;IACvC,MAAMO,aAAa,GAAGP,GAAG,CAACH,MAAJ,CAAWC,CAAC,IAAIA,CAAC,KAAKU,SAAtB,CAAtB;;IACA,IAAID,aAAa,CAACE,MAAd,GAAuB,CAA3B,EAA8B;MAC1B,MAAMC,OAAO,GAAGH,aAAa,CAACI,MAAd,CAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;QAC/C;QACCD,GAAD,CAAMC,GAAN,IAAa,CAACD,GAAG,CAACC,GAAD,CAAH,IAAY,CAAb,IAAkB,CAA/B;QACA,OAAOD,GAAP;MACH,CAJe,EAIb,EAJa,CAAhB,CAD0B,CAM1B;;MACA,OAAOE,MAAM,CAACC,IAAP,CAAYL,OAAZ,EAAqBC,MAArB,CAA4B,CAACK,CAAD,EAAIC,CAAJ,KAAUP,OAAO,CAACM,CAAD,CAAP,GAAaN,OAAO,CAACO,CAAD,CAApB,GAA0BD,CAA1B,GAA8BC,CAApE,CAAP;IACH;EACJ,CAXD;;EAaA,MAAMC,eAAe,GAAIC,KAAD,IAAwB;IAC5C;IACA,OAAOA,KAAK,CAACC,IAAN,CAAW,UAAUJ,CAAV,EAAaC,CAAb,EAAgB;MAC9B;MACA,OAAOI,IAAI,CAACC,KAAL,CAAWN,CAAX,IAAgBK,IAAI,CAACC,KAAL,CAAWL,CAAX,CAAvB;IACH,CAHM,EAGJ,CAHI,CAAP;EAIH,CAND;;EAQA,MAAMM,MAAM,GAAIC,WAAD,IAAyB;IACpC,IAAIC,WAAqB,GAAG,EAA5B;IAECnC,IAAD,CAAoBW,GAApB,CAAwBH,CAAC,IAAI;MACzB;MACA,OAAO2B,WAAW,CAACvB,IAAZ,CAAiBJ,CAAC,CAAC0B,WAAD,CAAlB,CAAP;IACH,CAHD;IAIA,OAAOlB,eAAe,CAACmB,WAAD,CAAtB;EACH,CARD;;EAWA,MAAMC,aAAa,GAAG,CAAC/B,KAAD,EAAgBC,KAAhB,KAAkC;IACpD,MAAM+B,YAAY,GAAIrC,IAAD,CAAoBO,MAApB,CAA4BC,CAAD,IAAO;MACnD;MACA,OAAOA,CAAC,CAACH,KAAD,CAAD,KAAaC,KAApB;IACH,CAHoB,CAArB;IAIA,OAAO+B,YAAY,CAAClB,MAAb,GAAuBnB,IAAD,CAAoBmB,MAA1C,GAAmD,GAA1D;EACH,CAND;;EAQA,MAAMmB,uBAAuB,GAAIjC,KAAD,IAAmB;IAC/C,MAAMkC,KAAY,GAAG,EAArB;IACCvC,IAAD,CAAoBW,GAApB,CAAyB6B,EAAD,IAAQ;MAC5B;MACAA,EAAE,CAACnC,KAAD,CAAF,CAAUoC,OAAV,CAAmBC,UAAD,IAAgB;QAC9B,OAAOH,KAAK,CAAC3B,IAAN,CAAY8B,UAAU,CAACC,IAAvB,CAAP;MACH,CAFD;IAIH,CAND;IAOA,OAAOJ,KAAP;EACH,CAVD;;EAYA,MAAMK,6BAA6B,GAAG,CAACC,SAAD,EAAoBC,OAApB,EAAqCC,OAArC,KAAsD;IACxF,IAAIC,WAAqB,GAAG,EAA5B;IACChD,IAAD,CAAoBO,MAApB,CAA4BC,CAAD,IAAO;MAC9B;MACA,OAAOA,CAAC,CAACsC,OAAD,CAAD,KAAeC,OAAtB;IACH,CAHD,EAGGpC,GAHH,CAGQsC,UAAD,IAAgB;MACnB;MACAA,UAAU,CAACJ,SAAD,CAAV,CAAsBJ,OAAtB,CAA+BS,OAAD,IAAa;QACvC,OAAOF,WAAW,CAACpC,IAAZ,CAAkBsC,OAAO,CAACP,IAA1B,CAAP;MACH,CAFD;IAIH,CATD;IAUA,OAAO3B,eAAe,CAACgC,WAAD,CAAtB;EACH,CAbD;;EAeA,MAAMG,0BAA0B,GAAG,CAACC,QAAD,EAAmBN,OAAnB,KAAuC;IACtE,MAAMO,QAAQ,GAAGpB,MAAM,CAACa,OAAD,CAAvB;IACA,IAAIE,WAAqB,GAAG,EAA5B;IAEChD,IAAD,CAAwBO,MAAxB,CAAgCC,CAAD,IAAO;MAClC;MACA,OAAOA,CAAC,CAACsC,OAAD,CAAD,KAAeO,QAAtB;IACH,CAHD,EAGG1C,GAHH,CAGOsC,UAAU,IAAI;MACjB;MACA,OAAOA,UAAU,CAACG,QAAD,CAAV,IAAwBJ,WAAW,CAACpC,IAAZ,CAAiBqC,UAAU,CAACG,QAAD,CAA3B,CAA/B;IACH,CAND;IAOA,OAAOpC,eAAe,CAACgC,WAAD,CAAtB;EACH,CAZD;;EAcA,MAAMM,YAAY,GAAG,UAACC,cAAD,EAAsD;IAAA,IAAvBC,IAAuB,uEAAT,CAAC,EAAD,CAAS;;IACvE,QAAQD,cAAR;MACI,KAAK,aAAL;QACI,OAAQvD,IAAD,CAAoBmB,MAA3B;;MAEJ,KAAK,WAAL;QACI,OAAOV,MAAM,CAAC+C,IAAI,CAAC,CAAD,CAAL,CAAN,CAAgBrC,MAAvB;;MAEJ,KAAK,wBAAL;QACI,OAAOf,aAAa,CAACoD,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAb,CAAgCrC,MAAvC;;MAEJ,KAAK,QAAL;QACI,OAAOc,MAAM,CAACuB,IAAI,CAAC,CAAD,CAAL,CAAb;;MAEJ,KAAK,iBAAL;QACI,OAAO5B,eAAe,CAAEnB,MAAM,CAAC+C,IAAI,CAAC,CAAD,CAAL,CAAR,CAAtB;;MAEJ,KAAK,+BAAL;QACI,OAAOZ,6BAA6B,CAACY,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,CAApC;;MAEJ,KAAK,4BAAL;QACI,OAAOL,0BAA0B,CAACK,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAjC;;MAEJ,KAAK,eAAL;QACI,OAAOpB,aAAa,CAACoB,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAb,GAAkC,GAAzC;;MAEJ,KAAK,4BAAL;QACI,OAAOxC,eAAe,CAACsB,uBAAuB,CAACkB,IAAI,CAAC,CAAD,CAAL,CAAxB,CAAtB;;MAEJ;QACI,OAAOD,cAAP;IA7BR;EA+BH,CAhCD;;EAkCA,IAAItD,MAAM,KAAK,SAAf,EAA0B,oBAAO;IAAA,UAAK;EAAL;IAAA;IAAA;IAAA;EAAA,QAAP;EAC1B,IAAIA,MAAM,KAAK,OAAf,EAAwB,oBAAO;IAAA,UAAK;EAAL;IAAA;IAAA;IAAA;EAAA,QAAP;EACxB,oBACI;IAAK,SAAS,EAAC,oCAAf;IAAA,UACKC,SAAS,KAAIJ,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEa,GAAP,CAAW8C,SAAS,IAAI;MAClC,oBAAO;QAAK,SAAS,EAAEA,SAAS,CAACC,QAA1B;QAAA,wBACH;UAAA,UACKD,SAAS,CAACE;QADf;UAAA;UAAA;UAAA;QAAA,QADG,eAIH;UAAI,SAAS,EAAC,YAAd;UAAA,UACKF,SAAS,CAACG,SAAV,CAAoBjD,GAApB,CAAwBkD,IAAI,IAAI;YAC7B,oBAAO;cAAY,SAAS,EAAC,iBAAtB;cAAA,wBACH;gBAAA,WAAOA,IAAI,CAACC,WAAL,GAAmB,GAA1B;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QADG,eAEH;gBAAA,UACIR,YAAY,CAACO,IAAI,CAACN,cAAN,EAAsBM,IAAI,CAACE,cAA3B;cADhB;gBAAA;gBAAA;gBAAA;cAAA,QAFG;YAAA,GAAS,CAAT;cAAA;cAAA;cAAA;YAAA,QAAP;UAOH,CARA;QADL;UAAA;UAAA;UAAA;QAAA,QAJG;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IAiBH,CAlBa,CAAJ;EADd;IAAA;IAAA;IAAA;EAAA,QADJ;AAuBH;;GAlKuBnE,K;UAEgBD,Q;;;KAFhBC,K"},"metadata":{},"sourceType":"module"}