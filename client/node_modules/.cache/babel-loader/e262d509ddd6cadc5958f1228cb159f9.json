{"ast":null,"code":"var _jsxFileName = \"/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stats(_ref) {\n  _s();\n\n  var _entityConfig$stats;\n\n  let {\n    entityConfig\n  } = _ref;\n  const {\n    fields,\n    normalQueryName\n  } = entityConfig;\n  const {\n    data,\n    status,\n    isSuccess\n  } = useQuery(normalQueryName, entityConfig.fetchAll); //@ts-ignore\n\n  const filterBoolean = (field, value) => {\n    //@ts-ignore\n    return data.filter(e => e[field] === value);\n  };\n\n  const getSet = field => {\n    const arr = []; //@ts-ignore\n\n    data.map(e => {\n      if (e[field]) {\n        //@ts-ignore\n        arr.push(e[field]);\n      }\n    });\n    return Array.from(new Set(arr));\n  };\n\n  const getMostFrequent = arr => {\n    const filteredArray = arr.filter(e => e !== undefined);\n\n    if (filteredArray.length > 0) {\n      const hashmap = filteredArray.reduce((acc, val) => {\n        //@ts-ignore\n        acc[val] = (acc[val] || 0) + 1;\n        return acc;\n      }, {}); //@ts-ignore\n\n      return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b);\n    }\n  };\n\n  const getEarliestDate = dates => {\n    //@ts-ignore\n    return dates.sort(function (a, b) {\n      //@ts-ignore\n      return Date.parse(a) > Date.parse(b);\n    })[0];\n  };\n\n  const getTop = targetField => {\n    let targetArray = [];\n    data.map(e => {\n      //@ts-ignore\n      return targetArray.push(e[targetField]);\n    });\n    return getMostFrequent(targetArray);\n  };\n\n  const getPercentage = (field, value) => {\n    const filteredData = data.filter(e => {\n      //@ts-ignore\n      return e[field] === value;\n    });\n    return filteredData.length / data.length * 100;\n  };\n\n  const extractNestedFieldArray = field => {\n    const array = [];\n    data.map(el => {\n      //@ts-ignore\n      el[field].forEach(subElement => {\n        return array.push(subElement.name);\n      });\n    });\n    return array;\n  };\n\n  const getNestedFieldWithMostByField = (mostField, byField, byValue) => {\n    let resultArray = [];\n    data.filter(e => {\n      //@ts-ignore\n      return e[byField] === byValue;\n    }).map(filteredEl => {\n      //@ts-ignore\n      filteredEl[mostField].forEach(element => {\n        return resultArray.push(element.name);\n      });\n    });\n    return getMostFrequent(resultArray);\n  };\n\n  const getFieldWithMostByTopField = (getField, byField) => {\n    const topValue = getTop(byField);\n    let resultArray = [];\n    data.filter(e => {\n      //@ts-ignore\n      return e[byField] === topValue;\n    }).map(filteredEl => {\n      //@ts-ignore\n      return filteredEl[getField] && resultArray.push(filteredEl[getField]);\n    });\n    return getMostFrequent(resultArray);\n  };\n\n  const renderResult = function (comparisonType) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [''];\n    console.log(args);\n\n    switch (comparisonType) {\n      case 'getDataSize':\n        return data.length;\n\n      case 'getAmount':\n        return getSet(args[0]).length;\n\n      case 'getFilterBooleanAmount':\n        return filterBoolean(args[0], args[1]).length;\n\n      case 'getEarliestDate':\n        console.log(\"geting data\"); //ts-ignore\n\n        return getEarliestDate(getSet(args[0]));\n\n      default:\n        return comparisonType;\n    }\n  };\n\n  if (status === 'loading') return /*#__PURE__*/_jsxDEV(\"h6\", {\n    children: 'Loading stats...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 38\n  }, this);\n  if (status === 'error') return /*#__PURE__*/_jsxDEV(\"h6\", {\n    children: 'Error loading stats'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 36\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-between p-5\",\n    children: [(_entityConfig$stats = entityConfig.stats) === null || _entityConfig$stats === void 0 ? void 0 : _entityConfig$stats.map(statGroup => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: statGroup.divClass,\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: statGroup.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group\",\n          children: statGroup.statsList.map(stat => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [stat.description, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: //@ts-ignore\n                renderResult(stat.comparisonType, stat.comparisonArgs)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 33\n              }, this)]\n            }, 1, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-warning rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: 'Top Priority:'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Closest deadline: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [getEarliestDate(getSet('startDate')), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this)]\n        }, 1, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Most in-demand skills for senior managers: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getNestedFieldWithMostByField('requiredSkills', 'bookingGrade', 'Senior Manager')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, 2, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Office city with the most jobs from the top client: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getFieldWithMostByTopField('officeCity', 'clientId')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, 3, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Percentage of talent grades to be defined: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: isSuccess && getPercentage(\"talentGrade\", \"\") + '%'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, 4, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-secondary rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: 'Did you know?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Most required skill: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [getMostFrequent(extractNestedFieldArray('requiredSkills')), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)]\n        }, 1, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Most frequent optional skill: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getMostFrequent(extractNestedFieldArray('optionalSkills'))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this)]\n        }, 2, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Job Manager with the most positions: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getTop('jobManagerId')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this)]\n        }, 3, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: ['Percentage of jobs in Low Tech: ', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: isSuccess && getPercentage(\"industry\", \"Low technology\") + '%'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this)]\n        }, 4, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Stats, \"ATPq03CP5uGupgP6Jcrj0kBQMhY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Stats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["React","useQuery","Stats","entityConfig","fields","normalQueryName","data","status","isSuccess","fetchAll","filterBoolean","field","value","filter","e","getSet","arr","map","push","Array","from","Set","getMostFrequent","filteredArray","undefined","length","hashmap","reduce","acc","val","Object","keys","a","b","getEarliestDate","dates","sort","Date","parse","getTop","targetField","targetArray","getPercentage","filteredData","extractNestedFieldArray","array","el","forEach","subElement","name","getNestedFieldWithMostByField","mostField","byField","byValue","resultArray","filteredEl","element","getFieldWithMostByTopField","getField","topValue","renderResult","comparisonType","args","console","log","stats","statGroup","divClass","title","statsList","stat","description","comparisonArgs"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx"],"sourcesContent":["import React from 'react'\nimport { useQuery } from 'react-query'\nimport { EntityConfig, FunctionType } from '../config/main/schema'\n\ntype StatsProps = {\n    entityConfig: EntityConfig\n}\n\nexport default function Stats({ entityConfig }: StatsProps) {\n    const { fields, normalQueryName } = entityConfig\n    const { data, status, isSuccess } = useQuery(normalQueryName, entityConfig.fetchAll)\n    //@ts-ignore\n\n    const filterBoolean = (field: string, value: boolean) => {\n        //@ts-ignore\n        return data.filter((e) =>\n            e[field] === value\n        )\n    }\n\n    const getSet = (field: string) => {\n        const arr: Iterable<Array<string>> | null | undefined = []\n        //@ts-ignore\n        data.map(e => {\n            if (e[field]) {\n                //@ts-ignore\n                arr.push(e[field])\n            }\n        }\n        )\n        return Array.from(new Set(arr))\n    }\n    const getMostFrequent = (arr: string[]) => {\n        const filteredArray = arr.filter(e => e !== undefined)\n        if (filteredArray.length > 0) {\n            const hashmap = filteredArray.reduce((acc, val) => {\n                //@ts-ignore\n                (acc)[val] = (acc[val] || 0) + 1\n                return acc\n            }, {})\n            //@ts-ignore\n            return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b)\n        }\n    }\n\n    const getEarliestDate = (dates: Array<Date>) => {\n        //@ts-ignore\n        return dates.sort(function (a, b) {\n            //@ts-ignore\n            return Date.parse(a) > Date.parse(b);\n        })[0];\n    }\n\n    const getTop = (targetField: string) => {\n        let targetArray: string[] = [];\n\n        (data as unknown[]).map(e => {\n            //@ts-ignore\n            return targetArray.push(e[targetField])\n        });\n        return getMostFrequent(targetArray)\n    }\n\n\n    const getPercentage = (field: string, value: string) => {\n        const filteredData = (data as unknown[]).filter((e) => {\n            //@ts-ignore\n            return e[field] === value\n        })\n        return filteredData.length / (data as unknown[]).length * 100\n    }\n\n    const extractNestedFieldArray = (field: string) => {\n        const array: any[] = [];\n        (data as unknown[]).map((el) => {\n            //@ts-ignore\n            el[field].forEach((subElement) => {\n                return array.push((subElement.name))\n            });\n\n        })\n        return array\n    }\n\n    const getNestedFieldWithMostByField = (mostField: string, byField: string, byValue: any) => {\n        let resultArray: string[] = [];\n        (data as unknown[]).filter((e) => {\n            //@ts-ignore\n            return e[byField] === byValue\n        }).map((filteredEl) => {\n            //@ts-ignore\n            filteredEl[mostField].forEach((element) => {\n                return resultArray.push((element.name))\n            });\n\n        })\n        return getMostFrequent(resultArray)\n    }\n\n    const getFieldWithMostByTopField = (getField: string, byField: string) => {\n        const topValue = getTop(byField)\n        let resultArray: string[] = [];\n\n        (data as unknown[]).filter((e) => {\n            //@ts-ignore\n\n            return e[byField] === topValue\n        }).map(filteredEl => {\n            //@ts-ignore\n\n            return filteredEl[getField] && resultArray.push(filteredEl[getField])\n        });\n        return getMostFrequent(resultArray)\n    }\n\n    const renderResult = (comparisonType: FunctionType, args: any[] = ['']) => {\n        console.log(args)\n        switch (comparisonType) {\n            case 'getDataSize':\n                return (data as unknown[]).length\n            case 'getAmount':\n                return getSet(args[0]).length\n            case 'getFilterBooleanAmount':\n                return filterBoolean(args[0], args[1]).length\n\n            case 'getEarliestDate':\n                console.log(\"geting data\")\n                //ts-ignore\n                return getEarliestDate(getSet(args[0]))\n            default:\n                return comparisonType\n        }\n    }\n\n    if (status === 'loading') return <h6>{'Loading stats...'}</h6>\n    if (status === 'error') return <h6>{'Error loading stats'}</h6>\n    return (\n        <div className=\"d-flex justify-content-between p-5\">\n            {entityConfig.stats?.map(statGroup => {\n                return <div className={statGroup.divClass}>\n                    <h5>\n                        {statGroup.title}\n                    </h5>\n                    <ul className=\"list-group\">\n                        {statGroup.statsList.map(stat => {\n                            return <li key={1} className=\"list-group-item\">\n                                <span>{stat.description} </span>\n                                <strong>{\n                                    //@ts-ignore\n                                    renderResult(stat.comparisonType, stat.comparisonArgs)\n                                }\n                                </strong>\n                            </li>\n                        })}\n\n                    </ul>\n                </div>\n            })}\n            <div className='bg-warning rounded'>\n                <h5>\n                    {'Top Priority:'}\n                </h5>\n\n                <ul className=\"list-group\">\n                    <li key={1} className=\"list-group-item\">\n                        <span>{'Closest deadline: '} </span>\n                        {/*@ts-ignore*/}\n                        <strong>{getEarliestDate(getSet('startDate'))} </strong>\n                    </li>\n                    <li key={2} className=\"list-group-item\">\n                        <span >{'Most in-demand skills for senior managers: '} </span>\n                        <strong>{getNestedFieldWithMostByField('requiredSkills', 'bookingGrade', 'Senior Manager')}</strong>\n                    </li>\n                    <li key={3} className=\"list-group-item\">\n                        <span>{'Office city with the most jobs from the top client: '} </span>\n                        <strong>{getFieldWithMostByTopField('officeCity', 'clientId')}</strong>\n                    </li>\n                    <li key={4} className=\"list-group-item\">\n                        <span>{'Percentage of talent grades to be defined: '} </span>\n                        <strong>{isSuccess && getPercentage(\"talentGrade\", \"\") + '%'}</strong>\n                    </li>\n                </ul>\n            </div>\n            <div className='bg-secondary rounded'>\n                <h5>\n                    {'Did you know?'}\n                </h5>\n\n                <ul className=\"list-group\">\n                    <li key={1} className=\"list-group-item\">\n                        <span>{'Most required skill: '} </span>\n                        <strong>{getMostFrequent(extractNestedFieldArray('requiredSkills'))} </strong>\n                    </li>\n                    <li key={2} className=\"list-group-item\">\n                        <span >{'Most frequent optional skill: '} </span>\n                        <strong>{getMostFrequent(extractNestedFieldArray('optionalSkills'))}</strong>\n                    </li>\n                    <li key={3} className=\"list-group-item\">\n                        <span>{'Job Manager with the most positions: '} </span>\n                        <strong>{getTop('jobManagerId')}</strong>\n                    </li>\n                    <li key={4} className=\"list-group-item\">\n                        <span>{'Percentage of jobs in Low Tech: '} </span>\n                        <strong>{isSuccess && getPercentage(\"industry\", \"Low technology\") + '%'}</strong>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}