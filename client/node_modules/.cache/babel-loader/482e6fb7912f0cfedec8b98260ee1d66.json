{"ast":null,"code":"var _jsxFileName = \"/home/sergi/aspaara/react-coding-challenge/client/src/components/job/JobDashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport jobConfig from '../config/dashboards/jobConfig';\nimport { useInfiniteQuery } from 'react-query';\nimport Stats from '../ui/Stats';\nimport { JobContext } from '../context/jobContext';\nimport Table from '../ui/Table';\nimport FilterGroup from '../ui/FilterGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst JobDashboard = () => {\n  _s();\n\n  //@ts-ignore\n  const [state, dispatch] = useContext(JobContext);\n  const [fetchOptions, setFetchOptions] = useState({\n    itemsPerPage: 10,\n    sortOptions: {\n      sortBy: 'id',\n      sortOrder: 'asc'\n    },\n    filterOptions: []\n  });\n  const {\n    data,\n    status,\n    hasNextPage,\n    fetchNextPage,\n    isSuccess //@ts-ignore\n\n  } = useInfiniteQuery([\"InfiniteQueryData\", state], _ref => {\n    let {\n      pageParam = 1\n    } = _ref;\n    return jobConfig.fetch(pageParam, state);\n  }, {\n    getNextPageParam: (lastPage, allPages) => {\n      const nextPage = allPages.length + 1;\n      return nextPage;\n    }\n  });\n\n  const handleCheckboxChange = event => {\n    if (event.target.checked === true) {\n      //@ts-ignore\n      setFetchOptions({ ...fetchOptions,\n        filterOptions: [...fetchOptions.filterOptions, {\n          filterBy: event.target.name,\n          filterParam: 'true'\n        }]\n      });\n    } else {\n      //@ts-ignore\n      setFetchOptions({ ...fetchOptions,\n        filterOptions: fetchOptions.filterOptions.filter(options => (options === null || options === void 0 ? void 0 : options.filterBy) !== event.target.name)\n      });\n    }\n  };\n\n  const handleSearchChange = event => {\n    //@ts-ignore\n    console.log(fetchOptions); //@ts-ignore\n\n    if (!fetchOptions.filterOptions.some(filter => filter.filterBy === 'q')) {\n      //@ts-ignore\n      setFetchOptions({ ...fetchOptions,\n        filterOptions: [...fetchOptions.filterOptions, {\n          filterBy: 'q',\n          filterParam: event.target.value\n        }]\n      });\n    } else {\n      //@ts-ignore\n      const SearchOptionIndex = fetchOptions.filterOptions.findIndex(option => option.filterBy === 'q'); //@ts-ignore\n\n      fetchOptions.filterOptions[SearchOptionIndex] = {\n        filterBy: 'q',\n        filterParam: event.target.value\n      };\n      const newFetchOptions = fetchOptions; //@ts-ignore\n\n      setFetchOptions(newFetchOptions);\n      console.log(fetchOptions);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterGroup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), status === 'loading' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 34\n      }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"There has been an error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), isSuccess && /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        loadMore: fetchNextPage,\n        hasMore: hasNextPage,\n        loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(JobDashboard, \"pbLQ0VwCjU2IHw8pTM48HHFboBQ=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = JobDashboard;\nexport default JobDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobDashboard\");","map":{"version":3,"names":["React","useState","useContext","InfiniteScroll","jobConfig","useInfiniteQuery","Stats","JobContext","Table","FilterGroup","JobDashboard","state","dispatch","fetchOptions","setFetchOptions","itemsPerPage","sortOptions","sortBy","sortOrder","filterOptions","data","status","hasNextPage","fetchNextPage","isSuccess","pageParam","fetch","getNextPageParam","lastPage","allPages","nextPage","length","handleCheckboxChange","event","target","checked","filterBy","name","filterParam","filter","options","handleSearchChange","console","log","some","value","SearchOptionIndex","findIndex","option","newFetchOptions"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/components/job/JobDashboard.tsx"],"sourcesContent":["import React, { ChangeEvent, useState, useContext } from 'react'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport jobConfig from '../config/dashboards/jobConfig'\nimport { useInfiniteQuery } from 'react-query'\nimport Stats from '../ui/Stats';\nimport { JobContext } from '../context/jobContext';\nimport Table from '../ui/Table';\nimport FilterGroup from '../ui/FilterGroup';\n\nconst JobDashboard = () => {\n  //@ts-ignore\n  const [state, dispatch] = useContext(JobContext)\n  const [fetchOptions, setFetchOptions] = useState({\n    itemsPerPage: 10, sortOptions: {\n      sortBy: 'id',\n      sortOrder: 'asc'\n    }, filterOptions: []\n  })\n\n  const { data, status, hasNextPage, fetchNextPage, isSuccess\n    //@ts-ignore\n  } = useInfiniteQuery([\"InfiniteQueryData\", state], ({ pageParam = 1 }) => jobConfig.fetch(pageParam, state), {\n\n    getNextPageParam: (lastPage, allPages) => {\n      const nextPage = allPages.length + 1\n      return nextPage\n    }\n  })\n\n  const handleCheckboxChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked === true) {\n      //@ts-ignore\n      setFetchOptions({ ...fetchOptions, filterOptions: [...fetchOptions.filterOptions, { filterBy: event.target.name, filterParam: 'true' }] })\n    } else {\n      //@ts-ignore\n      setFetchOptions({ ...fetchOptions, filterOptions: fetchOptions.filterOptions.filter(options => options?.filterBy !== event.target.name) })\n    }\n  }\n\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    //@ts-ignore\n    console.log(fetchOptions)\n    //@ts-ignore\n    if (!fetchOptions.filterOptions.some(filter => filter.filterBy === 'q')) {\n      //@ts-ignore\n      setFetchOptions({ ...fetchOptions, filterOptions: [...fetchOptions.filterOptions, { filterBy: 'q', filterParam: event.target.value }] })\n    } else {\n      //@ts-ignore\n      const SearchOptionIndex = fetchOptions.filterOptions.findIndex((option) => option.filterBy === 'q')\n      //@ts-ignore\n      fetchOptions.filterOptions[SearchOptionIndex] = { filterBy: 'q', filterParam: event.target.value }\n      const newFetchOptions = fetchOptions\n      //@ts-ignore\n      setFetchOptions(newFetchOptions)\n      console.log(fetchOptions);\n\n    }\n  }\n\n  return (\n    <>\n      {/*@ts-ignore*/}\n      <div>\n        <Stats />\n        <FilterGroup />\n        {status === 'loading' && <h1>Loading...</h1>}\n        {status === 'error' && <h1>There has been an error</h1>}\n        <Table />\n\n        {isSuccess && < InfiniteScroll loadMore={fetchNextPage}\n          hasMore={hasNextPage}\n          loader={<h4>Loading...</h4>}\n        ></InfiniteScroll>}\n      </div>\n    </>\n  )\n}\n\nexport default JobDashboard"],"mappings":"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"},"metadata":{},"sourceType":"module"}