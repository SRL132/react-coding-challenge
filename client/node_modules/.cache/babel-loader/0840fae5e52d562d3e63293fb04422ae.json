{"ast":null,"code":"var _jsxFileName = \"/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-query';\nimport jobConfig from '../config/dashboards/jobConfig'; //most repeated string in an array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stats() {\n  _s();\n\n  const getMostFrequent = arr => {\n    const filteredArray = arr.filter(e => e !== undefined);\n\n    if ((filteredArray === null || filteredArray === void 0 ? void 0 : filteredArray.length) > 0) {\n      const hashmap = filteredArray.reduce((acc, val) => {\n        //@ts-ignore\n        acc[val] = (acc[val] || 0) + 1;\n        return acc;\n      }, {}); //@ts-ignore\n\n      return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b);\n    }\n  };\n\n  const getMostRequiredSkillsByRole = role => {\n    let skillsArray = [];\n    data.filter(e => {\n      return e.bookingGrade === role;\n    }).map(job => {\n      var _job$requiredSkills;\n\n      job === null || job === void 0 ? void 0 : (_job$requiredSkills = job.requiredSkills) === null || _job$requiredSkills === void 0 ? void 0 : _job$requiredSkills.forEach(element => {\n        return skillsArray.push(element.name);\n      });\n    });\n    return getMostFrequent(skillsArray);\n  };\n\n  const getTopClient = () => {\n    let clientArray = [];\n    data.map(job => {\n      return clientArray.push(job.clientId);\n    });\n    return getMostFrequent(clientArray);\n  };\n\n  const getOfficeWithMostJobsByTopClient = () => {\n    const client = getTopClient();\n    let officeCityArray = [];\n    data.filter(e => {\n      return e.clientName === client;\n    }).map(job => {\n      return officeCityArray.push(job === null || job === void 0 ? void 0 : job.officeCity);\n    });\n    console.log(officeCityArray);\n    return getMostFrequent(officeCityArray);\n  };\n\n  const getPercentageOfJobsByIndustry = industry => {\n    const filteredData = data.filter(e => {\n      return e.industry === industry;\n    });\n    return filteredData.length / data.length * 100;\n  };\n\n  const {\n    data,\n    status,\n    isSuccess\n  } = useQuery(\"fetchAllData\", jobConfig.fetchAll);\n  if (status === 'loading') return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading stats...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 38\n  }, this);\n  if (status === 'error') return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Error loading stats\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 36\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Main insights:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ['Data size: ' + isSuccess && data.length, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: 'Most in-demand skills for senior managers: ' + getMostRequiredSkillsByRole('Senior Manager')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ['Office city with the most jobs from the top client ' + getOfficeWithMostJobsByTopClient(), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Percentage of jobs in Low Tech: \", isSuccess && getPercentageOfJobsByIndustry(\"Low technology\") + '%']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Stats, \"ATPq03CP5uGupgP6Jcrj0kBQMhY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Stats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["React","useQuery","jobConfig","Stats","getMostFrequent","arr","filteredArray","filter","e","undefined","length","hashmap","reduce","acc","val","Object","keys","a","b","getMostRequiredSkillsByRole","role","skillsArray","data","bookingGrade","map","job","requiredSkills","forEach","element","push","name","getTopClient","clientArray","clientId","getOfficeWithMostJobsByTopClient","client","officeCityArray","clientName","officeCity","console","log","getPercentageOfJobsByIndustry","industry","filteredData","status","isSuccess","fetchAll"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx"],"sourcesContent":["import React from 'react'\nimport { useQuery } from 'react-query'\nimport { job } from '../config/dashboards/jobConfig'\nimport jobConfig from '../config/dashboards/jobConfig'\n\n//most repeated string in an array\nexport default function Stats() {\n    const getMostFrequent = (arr: string[]) => {\n        const filteredArray = arr.filter(e => e !== undefined)\n        if (filteredArray?.length > 0) {\n            const hashmap = filteredArray.reduce((acc, val) => {\n                //@ts-ignore\n                acc[val] = (acc[val] || 0) + 1\n                return acc\n            }, {})\n            //@ts-ignore\n            return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b)\n        }\n    }\n\n    const getMostRequiredSkillsByRole = (role: string) => {\n        let skillsArray: string[] = [];\n\n        (data as job[]).filter((e) => {\n            return e.bookingGrade === role\n        }).map((job) => {\n            job?.requiredSkills?.forEach((element) => {\n                return skillsArray.push((element.name))\n            });\n\n        }\n\n        )\n        return getMostFrequent(skillsArray)\n    }\n\n    const getTopClient = () => {\n        let clientArray: string[] = [];\n\n        (data as job[]).map(job => {\n            return clientArray.push(job.clientId)\n        });\n        return getMostFrequent(clientArray)\n    }\n\n    const getOfficeWithMostJobsByTopClient = () => {\n        const client = getTopClient()\n        let officeCityArray: string[] = [];\n\n        (data as job[]).filter((e) => {\n            return e.clientName === client\n        }).map(job => {\n\n            return officeCityArray.push(job?.officeCity)\n        });\n        console.log(officeCityArray)\n        return getMostFrequent(officeCityArray)\n    }\n\n    const getPercentageOfJobsByIndustry = (industry: string) => {\n        const filteredData = (data as job[]).filter((e) => {\n            return e.industry === industry\n        })\n        return filteredData.length / (data as job[]).length * 100\n    }\n\n\n\n\n\n    const { data, status, isSuccess } = useQuery(\"fetchAllData\", jobConfig.fetchAll)\n    if (status === 'loading') return <h1>Loading stats...</h1>\n    if (status === 'error') return <h1>Error loading stats</h1>\n    return (\n        <div>\n            <h5>Main insights:</h5>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    <span>{'Data size: ' + isSuccess && (data as job[]).length} </span>\n                </li>\n                <li className=\"list-group-item\">\n                    <span>{'Most in-demand skills for senior managers: ' + getMostRequiredSkillsByRole('Senior Manager')}</span>\n                </li>\n                <li className=\"list-group-item\">\n                    <span>{'Office city with the most jobs from the top client ' + getOfficeWithMostJobsByTopClient()} </span>\n                </li>\n                <li className=\"list-group-item\">\n                    <span>Percentage of jobs in Low Tech: {isSuccess && getPercentageOfJobsByIndustry(\"Low technology\") + '%'}</span>\n                </li>\n            </ul>\n        </div>\n\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}