{"ast":null,"code":"import { reactiveFetchJobs, fetchAllJobs } from \"../../../api/jobs-api\";\nconst jobConfig = {\n  fields: {\n    id: {\n      name: 'id',\n      type: 'integer',\n      label: 'ID',\n      searcheable: true,\n      unique: true\n    },\n    originalId: {\n      name: 'originalId',\n      type: 'text',\n      label: 'Original ID',\n      unique: true\n    },\n    talentId: {\n      name: 'talentId',\n      type: 'text',\n      label: 'Talent ID'\n    },\n    talentName: {\n      name: 'talentName',\n      type: 'text',\n      label: 'Talent name'\n    },\n    talentGrade: {\n      name: 'talentGrade',\n      type: 'text',\n      label: 'Talent grade'\n    },\n    bookingGrade: {\n      name: 'bookingGrade',\n      type: 'text',\n      label: 'Booking grade'\n    },\n    operatingUnit: {\n      name: 'operatingUnit',\n      type: 'text',\n      label: 'Operating unit'\n    },\n    officeCity: {\n      name: 'officeCity',\n      type: 'text',\n      label: 'Office city'\n    },\n    officePostalCode: {\n      name: 'officePostalCode',\n      type: 'text',\n      label: 'Office Postal Code'\n    },\n    jobManagerName: {\n      name: 'jobManagerName',\n      type: 'text',\n      label: ' Job Manager Name'\n    },\n    jobManagerId: {\n      name: 'jobManageriD',\n      type: 'text',\n      label: 'Job Manager ID'\n    },\n    totalHours: {\n      name: 'totalHours',\n      type: 'float',\n      label: 'Total Hours'\n    },\n    startDate: {\n      name: 'startDate',\n      type: 'datetime',\n      label: 'Start Date'\n    },\n    endDate: {\n      name: 'endDate',\n      type: 'datetime',\n      label: 'End Date'\n    },\n    clientName: {\n      name: 'clientName',\n      type: 'text',\n      label: 'Client Name'\n    },\n    clientId: {\n      name: 'clientId',\n      type: 'text',\n      label: 'Client ID'\n    },\n    industry: {\n      name: 'industry',\n      type: 'text',\n      label: 'Industry'\n    },\n    requiredSkills: {\n      name: 'requiredSkills',\n      type: 'keyValueArray',\n      label: 'Required Skills'\n    },\n    optionalSkills: {\n      name: 'optionalSkills',\n      type: 'keyValueArray',\n      label: 'Optional Skills'\n    },\n    isUnassigned: {\n      name: 'isUnassigned',\n      type: 'boolean',\n      label: 'Unassigned'\n    }\n  },\n  stats: [{\n    title: 'Data Insights',\n    divClass: 'bg-secondary rounded',\n    statsList: [{\n      comparisonArgs: [],\n      comparisonType: 'getDataSize',\n      description: 'Data size: '\n    }, {\n      comparisonArgs: ['officeCity'],\n      comparisonType: 'getAmount',\n      description: 'Number of cities:'\n    }, {\n      comparisonArgs: ['isUnassigned', true],\n      comparisonType: 'getFilterBooleanAmount',\n      description: 'Unassigned jobs:'\n    }, {\n      comparisonArgs: ['industry'],\n      comparisonType: 'getAmount',\n      description: 'Number of industries:'\n    }]\n  }, {\n    title: 'Top Priority',\n    divClass: 'bg-warning rounded',\n    statsList: [{\n      comparisonArgs: ['startDate'],\n      comparisonType: 'getEarliestDate',\n      description: 'Closest deadline: '\n    }, {\n      comparisonArgs: ['requiredSkills', 'bookingGrade', 'Senior Manager'],\n      comparisonType: 'getNestedFieldWithMostByField',\n      description: 'Most in-demand skills for senior managers:'\n    }, {\n      comparisonArgs: ['officeCity', 'clientId'],\n      comparisonType: 'getFieldWithMostByTopField',\n      description: 'Office city with the most jobs from the top client: '\n    }]\n  }, {\n    title: 'DidYouKnow',\n    divClass: 'bg-secondary rounded',\n    statsList: []\n  }],\n  fetch: reactiveFetchJobs,\n  fetchAll: fetchAllJobs,\n  infiniteQueryName: 'infiniteJobData',\n  normalQueryName: 'allJobData'\n};\nexport default jobConfig;","map":{"version":3,"names":["reactiveFetchJobs","fetchAllJobs","jobConfig","fields","id","name","type","label","searcheable","unique","originalId","talentId","talentName","talentGrade","bookingGrade","operatingUnit","officeCity","officePostalCode","jobManagerName","jobManagerId","totalHours","startDate","endDate","clientName","clientId","industry","requiredSkills","optionalSkills","isUnassigned","stats","title","divClass","statsList","comparisonArgs","comparisonType","description","fetch","fetchAll","infiniteQueryName","normalQueryName"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/components/config/dashboards/jobConfig.ts"],"sourcesContent":["import { reactiveFetchJobs, fetchAllJobs } from \"../../../api/jobs-api\";\nimport { EntityConfig } from \"../main/schema\";\n\nexport interface job {\n    id: number, //unique,\n    originalId: string, //unique,\n    talentId?: string,\n    talentName?: string,\n    talentGrade?: string,\n    bookingGrade?: string,\n    operatingUnit: string,\n    officeCity?: string,\n    officePostalCode: string,\n    jobManagerName?: string,\n    jobManagerId?: string,\n    totalHours: number,\n    startDate: Date,\n    endDate: Date,\n    clientName?: string,\n    clientId: string,\n    industry?: string,\n    requiredSkills?: skill[]\n    optionalSkills?: skill[]\n    isUnassigned: boolean,\n}\n\ntype skill = {\n    name: string;\n    category: string;\n}\n\nconst jobConfig: EntityConfig = {\n    fields:\n    {\n        id: {\n            name: 'id',\n            type: 'integer',\n            label: 'ID',\n            searcheable: true,\n            unique: true\n        },\n        originalId: {\n            name: 'originalId',\n            type: 'text',\n            label: 'Original ID',\n            unique: true\n        },\n\n        talentId: {\n            name: 'talentId',\n            type: 'text',\n            label: 'Talent ID'\n        },\n        talentName: {\n            name: 'talentName',\n            type: 'text',\n            label: 'Talent name'\n        },\n        talentGrade: {\n            name: 'talentGrade',\n            type: 'text',\n            label: 'Talent grade'\n        },\n        bookingGrade: {\n            name: 'bookingGrade',\n            type: 'text',\n            label: 'Booking grade'\n        },\n        operatingUnit: {\n            name: 'operatingUnit',\n            type: 'text',\n            label: 'Operating unit'\n        },\n        officeCity: {\n            name: 'officeCity',\n            type: 'text',\n            label: 'Office city',\n        },\n        officePostalCode: {\n            name: 'officePostalCode',\n            type: 'text',\n            label: 'Office Postal Code'\n        },\n        jobManagerName: {\n            name: 'jobManagerName',\n            type: 'text',\n            label: ' Job Manager Name'\n        },\n        jobManagerId: {\n            name: 'jobManageriD',\n            type: 'text',\n            label: 'Job Manager ID'\n        },\n        totalHours: {\n            name: 'totalHours',\n            type: 'float',\n            label: 'Total Hours'\n        },\n        startDate: {\n            name: 'startDate',\n            type: 'datetime',\n            label: 'Start Date'\n        },\n        endDate: {\n            name: 'endDate',\n            type: 'datetime',\n            label: 'End Date'\n        },\n        clientName: {\n            name: 'clientName',\n            type: 'text',\n            label: 'Client Name'\n        },\n        clientId: {\n            name: 'clientId',\n            type: 'text',\n            label: 'Client ID'\n        },\n        industry: {\n            name: 'industry',\n            type: 'text',\n            label: 'Industry'\n        },\n        requiredSkills: {\n            name: 'requiredSkills',\n            type: 'keyValueArray',\n            label: 'Required Skills'\n        },\n        optionalSkills: {\n            name: 'optionalSkills',\n            type: 'keyValueArray',\n            label: 'Optional Skills'\n        },\n        isUnassigned: {\n            name: 'isUnassigned',\n            type: 'boolean',\n            label: 'Unassigned'\n        },\n    },\n    stats: [\n        {\n            title: 'Data Insights',\n            divClass: 'bg-secondary rounded',\n            statsList: [\n                {\n                    comparisonArgs: [],\n                    comparisonType: 'getDataSize',\n                    description: 'Data size: '\n                },\n                {\n                    comparisonArgs: ['officeCity'],\n                    comparisonType: 'getAmount',\n                    description: 'Number of cities:'\n                },\n                {\n                    comparisonArgs: ['isUnassigned', true],\n                    comparisonType: 'getFilterBooleanAmount',\n                    description: 'Unassigned jobs:'\n                },\n                {\n                    comparisonArgs: ['industry'],\n                    comparisonType: 'getAmount',\n                    description: 'Number of industries:'\n                },\n            ]\n        },\n        {\n            title: 'Top Priority',\n            divClass: 'bg-warning rounded',\n            statsList: [\n                {\n                    comparisonArgs: ['startDate'],\n                    comparisonType: 'getEarliestDate',\n                    description: 'Closest deadline: '\n                },\n                {\n                    comparisonArgs: ['requiredSkills', 'bookingGrade', 'Senior Manager'],\n                    comparisonType: 'getNestedFieldWithMostByField',\n                    description: 'Most in-demand skills for senior managers:'\n                },\n                {\n                    comparisonArgs: ['officeCity', 'clientId'],\n                    comparisonType: 'getFieldWithMostByTopField',\n                    description: 'Office city with the most jobs from the top client: '\n                },\n            ]\n        },\n        {\n            title: 'DidYouKnow',\n            divClass: 'bg-secondary rounded',\n            statsList: []\n        }\n\n    ],\n    fetch: reactiveFetchJobs,\n    fetchAll: fetchAllJobs,\n    infiniteQueryName: 'infiniteJobData',\n    normalQueryName: 'allJobData'\n}\n\nexport default jobConfig\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}