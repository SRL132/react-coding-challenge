{"ast":null,"code":"const BASE_URL = 'http://localhost:9000/';\nexport const reactiveFetchJobs = async function () {\n  var _fetchOptions$filterO;\n\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let fetchOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    itemsPerPage: 10,\n    sortOptions: {\n      sortBy: 'id',\n      sortOrder: 'asc'\n    },\n    filterOptions: [{\n      filterBy: 'q',\n      filterParam: ''\n    }]\n  };\n  let URL = '';\n  const PAGINATED_URL = `${BASE_URL}jobs?_page=${page}&_limit=${fetchOptions.itemsPerPage}`;\n\n  if (fetchOptions.sortOptions) {\n    URL = `${URL}${PAGINATED_URL}&_sort=${fetchOptions.sortOptions.sortBy}&_order=${fetchOptions.sortOptions.sortOrder}`;\n  }\n\n  if ((_fetchOptions$filterO = fetchOptions.filterOptions) !== null && _fetchOptions$filterO !== void 0 && _fetchOptions$filterO.length) {\n    fetchOptions.filterOptions.forEach(option => {\n      if (option.filterParam && option.filterBy !== 'q') {\n        URL += `&${option.filterBy}_like=^${option.filterParam}`;\n      } else {\n        URL += `&${option.filterBy}=${option.filterParam}`;\n      }\n    });\n  }\n\n  console.log(URL); //@ts-ignore\n\n  return fetch(`${URL}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    return result;\n  });\n};\nexport const fetchAllJobs = async () => {\n  return fetch('http://localhost:9000/jobs', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    return result;\n  });\n};","map":{"version":3,"names":["BASE_URL","reactiveFetchJobs","page","fetchOptions","itemsPerPage","sortOptions","sortBy","sortOrder","filterOptions","filterBy","filterParam","URL","PAGINATED_URL","length","forEach","option","console","log","fetch","headers","then","response","json","result","fetchAllJobs"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/api/jobs-api.ts"],"sourcesContent":["export interface FetchOptions {\n    itemsPerPage: number;\n    sortOptions?: SortOptions;\n    filterOptions?: FilterOptions[];\n}\nexport type SortOptions = {\n    sortBy: string;\n    sortOrder: string\n}\n\nexport type FilterOptions = {\n    filterBy: string,\n    filterParam: string\n}\n\nconst BASE_URL = 'http://localhost:9000/'\n\nexport const reactiveFetchJobs = async (page = 0, fetchOptions: FetchOptions = {\n    itemsPerPage: 10,\n    sortOptions: {\n        sortBy: 'id',\n        sortOrder: 'asc'\n    }, filterOptions: [{\n        filterBy: 'q',\n        filterParam: ''\n    }]\n}) => {\n\n    let URL = ''\n    const PAGINATED_URL = `${BASE_URL}jobs?_page=${page}&_limit=${fetchOptions.itemsPerPage}`\n\n    if (fetchOptions.sortOptions) {\n        URL = `${URL}${PAGINATED_URL}&_sort=${fetchOptions.sortOptions.sortBy}&_order=${fetchOptions.sortOptions.sortOrder}`\n    }\n\n    if (fetchOptions.filterOptions?.length) {\n        fetchOptions.filterOptions.forEach((option) => {\n            if (option.filterParam && option.filterBy !== 'q') {\n                URL += `&${option.filterBy}_like=^${option.filterParam}`\n            }\n            else {\n                URL += `&${option.filterBy}=${option.filterParam}`\n            }\n        })\n\n    }\n    console.log(URL)\n    //@ts-ignore\n    return fetch(`${URL}`\n        , {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }\n    )\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (result) {\n            return result\n        });\n}\n\n\nexport const fetchAllJobs = async () => {\n\n    return fetch('http://localhost:9000/jobs'\n        , {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }\n    )\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (result) {\n            return result\n        });\n}"],"mappings":"AAeA,MAAMA,QAAQ,GAAG,wBAAjB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,kBAS3B;EAAA;;EAAA,IATkCC,IASlC,uEATyC,CASzC;EAAA,IAT4CC,YAS5C,uEATyE;IAC3EC,YAAY,EAAE,EAD6D;IAE3EC,WAAW,EAAE;MACTC,MAAM,EAAE,IADC;MAETC,SAAS,EAAE;IAFF,CAF8D;IAKxEC,aAAa,EAAE,CAAC;MACfC,QAAQ,EAAE,GADK;MAEfC,WAAW,EAAE;IAFE,CAAD;EALyD,CASzE;EAEF,IAAIC,GAAG,GAAG,EAAV;EACA,MAAMC,aAAa,GAAI,GAAEZ,QAAS,cAAaE,IAAK,WAAUC,YAAY,CAACC,YAAa,EAAxF;;EAEA,IAAID,YAAY,CAACE,WAAjB,EAA8B;IAC1BM,GAAG,GAAI,GAAEA,GAAI,GAAEC,aAAc,UAAST,YAAY,CAACE,WAAb,CAAyBC,MAAO,WAAUH,YAAY,CAACE,WAAb,CAAyBE,SAAU,EAAnH;EACH;;EAED,6BAAIJ,YAAY,CAACK,aAAjB,kDAAI,sBAA4BK,MAAhC,EAAwC;IACpCV,YAAY,CAACK,aAAb,CAA2BM,OAA3B,CAAoCC,MAAD,IAAY;MAC3C,IAAIA,MAAM,CAACL,WAAP,IAAsBK,MAAM,CAACN,QAAP,KAAoB,GAA9C,EAAmD;QAC/CE,GAAG,IAAK,IAAGI,MAAM,CAACN,QAAS,UAASM,MAAM,CAACL,WAAY,EAAvD;MACH,CAFD,MAGK;QACDC,GAAG,IAAK,IAAGI,MAAM,CAACN,QAAS,IAAGM,MAAM,CAACL,WAAY,EAAjD;MACH;IACJ,CAPD;EASH;;EACDM,OAAO,CAACC,GAAR,CAAYN,GAAZ,EApBE,CAqBF;;EACA,OAAOO,KAAK,CAAE,GAAEP,GAAI,EAAR,EACN;IACEQ,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,UAAU;IAFL;EADX,CADM,CAAL,CAQFC,IARE,CAQG,UAAUC,QAAV,EAAoB;IACtB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACH,CAVE,EAWFF,IAXE,CAWG,UAAUG,MAAV,EAAkB;IACpB,OAAOA,MAAP;EACH,CAbE,CAAP;AAcH,CA7CM;AAgDP,OAAO,MAAMC,YAAY,GAAG,YAAY;EAEpC,OAAON,KAAK,CAAC,4BAAD,EACN;IACEC,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,UAAU;IAFL;EADX,CADM,CAAL,CAQFC,IARE,CAQG,UAAUC,QAAV,EAAoB;IACtB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACH,CAVE,EAWFF,IAXE,CAWG,UAAUG,MAAV,EAAkB;IACpB,OAAOA,MAAP;EACH,CAbE,CAAP;AAcH,CAhBM"},"metadata":{},"sourceType":"module"}