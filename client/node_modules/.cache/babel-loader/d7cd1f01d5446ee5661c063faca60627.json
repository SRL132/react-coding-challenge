{"ast":null,"code":"var _jsxFileName = \"/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-query';\nimport jobConfig from '../config/dashboards/jobConfig'; //most repeated string in an array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stats() {\n  _s();\n\n  const getMostFrequent = arr => {\n    const hashmap = arr.reduce((acc, val) => {\n      //@ts-ignore\n      acc[val] = (acc[val] || 0) + 1;\n      return acc;\n    }, {}); //@ts-ignore\n\n    return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b);\n  };\n\n  const getMostRequiredSkillsByRole = role => {\n    let skillsArray = [];\n    const filteredData = data.filter(e => {\n      return e.bookingGrade === role;\n    }).map(job => {\n      var _job$requiredSkills;\n\n      job === null || job === void 0 ? void 0 : (_job$requiredSkills = job.requiredSkills) === null || _job$requiredSkills === void 0 ? void 0 : _job$requiredSkills.forEach(element => {\n        return skillsArray.push(element.name);\n      });\n    });\n    return getMostFrequent(skillsArray);\n  };\n\n  const getOfficeWithMostJobsByClient = client => {\n    let officeCityArray = [];\n    const filteredData = data.filter(e => {\n      return e.clientName === client;\n    }).map(job => {\n      return job.officeCity && officeCityArray.push(job.officeCity);\n    });\n    return getMostFrequent(officeCityArray);\n  };\n\n  const getPercentageOfJobsByIndustry = industry => {\n    const filteredData = data.filter(e => {\n      return e.industry === industry;\n    });\n    return filteredData.length / data.length * 100;\n  };\n\n  const {\n    data,\n    status,\n    isSuccess\n  } = useQuery(\"fetchAllData\", jobConfig.fetchAll);\n  if (status === 'loading') return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading stats...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 38\n  }, this);\n  if (status === 'error') return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Error loading stats\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 36\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Main insights:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ['Data size: ' + isSuccess && data.length, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: 'Most in-demand skills for senior managers: ' + getMostRequiredSkillsByRole('Senior Manager')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ['Office city with the most jobs from Aumann KGaA: ' + getOfficeWithMostJobsByClient('Aumann KGaA'), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Percentage of jobs in Low Tech: \", isSuccess && getPercentageOfJobsByIndustry(\"Low technology\") + '%']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Stats, \"ATPq03CP5uGupgP6Jcrj0kBQMhY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Stats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["React","useQuery","jobConfig","Stats","getMostFrequent","arr","hashmap","reduce","acc","val","Object","keys","a","b","getMostRequiredSkillsByRole","role","skillsArray","filteredData","data","filter","e","bookingGrade","map","job","requiredSkills","forEach","element","push","name","getOfficeWithMostJobsByClient","client","officeCityArray","clientName","officeCity","getPercentageOfJobsByIndustry","industry","length","status","isSuccess","fetchAll"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/components/ui/Stats.tsx"],"sourcesContent":["import React from 'react'\nimport { useQuery } from 'react-query'\nimport { job } from '../config/dashboards/jobConfig'\nimport jobConfig from '../config/dashboards/jobConfig'\n\n//most repeated string in an array\nexport default function Stats() {\n    const getMostFrequent = (arr: string[]) => {\n        const hashmap = arr.reduce((acc, val) => {\n            //@ts-ignore\n            acc[val] = (acc[val] || 0) + 1\n            return acc\n        }, {})\n        //@ts-ignore\n        return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b)\n    }\n\n    const getMostRequiredSkillsByRole = (role: string) => {\n        let skillsArray: string[] = []\n        const filteredData = (data as job[]).filter((e) => {\n            return e.bookingGrade === role\n        }).map((job) => {\n            job?.requiredSkills?.forEach((element) => {\n                return skillsArray.push((element.name))\n            });\n\n        }\n\n        )\n        return getMostFrequent(skillsArray)\n    }\n\n    const getOfficeWithMostJobsByClient = (client: string) => {\n\n        let officeCityArray: string[] = []\n        const filteredData = (data as job[]).filter((e) => {\n            return e.clientName === client\n        }).map(job => {\n            return job.officeCity && officeCityArray.push(job.officeCity)\n        });\n        return getMostFrequent(officeCityArray)\n    }\n\n    const getPercentageOfJobsByIndustry = (industry: string) => {\n        const filteredData = (data as job[]).filter((e) => {\n            return e.industry === industry\n        })\n        return filteredData.length / (data as job[]).length * 100\n    }\n\n\n\n\n\n    const { data, status, isSuccess } = useQuery(\"fetchAllData\", jobConfig.fetchAll)\n    if (status === 'loading') return <h1>Loading stats...</h1>\n    if (status === 'error') return <h1>Error loading stats</h1>\n    return (\n\n        <div>\n            <h5>Main insights:</h5>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\"><span>{'Data size: ' + isSuccess && (data as job[]).length} </span></li>\n                <li className=\"list-group-item\">\n                    <span>{'Most in-demand skills for senior managers: ' + getMostRequiredSkillsByRole('Senior Manager')}</span></li>\n                <li className=\"list-group-item\"><span>{'Office city with the most jobs from Aumann KGaA: ' + getOfficeWithMostJobsByClient('Aumann KGaA')} </span></li>\n                <li className=\"list-group-item\"><span>Percentage of jobs in Low Tech: {isSuccess && getPercentageOfJobsByIndustry(\"Low technology\") + '%'}</span></li>\n            </ul>\n        </div>\n\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}