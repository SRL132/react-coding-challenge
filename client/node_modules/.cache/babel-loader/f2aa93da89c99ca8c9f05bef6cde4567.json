{"ast":null,"code":"const BASE_URL = 'http://localhost:9000/';\nexport const reactiveFetchJobs = async function () {\n  var _fetchOptions$filterO, _fetchOptions$filterO2;\n\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let fetchOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    itemsPerPage: 10,\n    sortOptions: {\n      sortBy: 'id',\n      sortOrder: 'asc'\n    }\n  };\n  console.log(\"hi\");\n  let URL = '';\n  const PAGINATED_URL = `${BASE_URL}jobs?_page=${page}&_limit=${fetchOptions.itemsPerPage}`;\n\n  if (fetchOptions.sortOptions) {\n    var _fetchOptions$sortOpt, _fetchOptions$sortOpt2;\n\n    URL = `${PAGINATED_URL}&_sort=${(_fetchOptions$sortOpt = fetchOptions.sortOptions) === null || _fetchOptions$sortOpt === void 0 ? void 0 : _fetchOptions$sortOpt.sortBy}&_order=${(_fetchOptions$sortOpt2 = fetchOptions.sortOptions) === null || _fetchOptions$sortOpt2 === void 0 ? void 0 : _fetchOptions$sortOpt2.sortOrder}`;\n  } //@ts-ignore\n\n\n  return fetch(`${URL}&${((_fetchOptions$filterO = fetchOptions.filterOptions) === null || _fetchOptions$filterO === void 0 ? void 0 : _fetchOptions$filterO.length) > 0 && (fetchOptions === null || fetchOptions === void 0 ? void 0 : (_fetchOptions$filterO2 = fetchOptions.filterOptions) === null || _fetchOptions$filterO2 === void 0 ? void 0 : _fetchOptions$filterO2.map(option => option.filterBy + '=' + option.filterParam))}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    return result;\n  });\n};\nexport const fetchAllJobs = async () => {\n  return fetch('http://localhost:9000/jobs', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    return result;\n  });\n};","map":{"version":3,"names":["BASE_URL","reactiveFetchJobs","page","fetchOptions","itemsPerPage","sortOptions","sortBy","sortOrder","console","log","URL","PAGINATED_URL","fetch","filterOptions","length","map","option","filterBy","filterParam","headers","then","response","json","result","fetchAllJobs"],"sources":["/home/sergi/aspaara/react-coding-challenge/client/src/api/jobs-api.ts"],"sourcesContent":["export interface FetchOptions {\n    itemsPerPage: number;\n    sortOptions?: SortOptions;\n    filterOptions?: FilterOptions[];\n}\nexport type SortOptions = {\n    sortBy: string;\n    sortOrder: string\n}\n\nexport type FilterOptions = {\n    filterBy: string,\n    filterParam: string\n}\n\nconst BASE_URL = 'http://localhost:9000/'\n\nexport const reactiveFetchJobs = async (page = 0, fetchOptions: FetchOptions = {\n    itemsPerPage: 10,\n    sortOptions: {\n        sortBy: 'id',\n        sortOrder: 'asc'\n    }\n}) => {\n    console.log(\"hi\")\n    let URL = ''\n    const PAGINATED_URL = `${BASE_URL}jobs?_page=${page}&_limit=${fetchOptions.itemsPerPage}`\n\n    if (fetchOptions.sortOptions) {\n        URL = `${PAGINATED_URL}&_sort=${fetchOptions.sortOptions?.sortBy}&_order=${fetchOptions.sortOptions?.sortOrder}`\n    }\n\n\n    //@ts-ignore\n    return fetch(`${URL}&${fetchOptions.filterOptions?.length > 0 && fetchOptions?.filterOptions?.map(option => option.filterBy + '=' + option.filterParam)}`\n        , {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }\n    )\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (result) {\n            return result\n        });\n}\n\n\nexport const fetchAllJobs = async () => {\n\n    return fetch('http://localhost:9000/jobs'\n        , {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }\n    )\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (result) {\n            return result\n        });\n}"],"mappings":"AAeA,MAAMA,QAAQ,GAAG,wBAAjB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,kBAM3B;EAAA;;EAAA,IANkCC,IAMlC,uEANyC,CAMzC;EAAA,IAN4CC,YAM5C,uEANyE;IAC3EC,YAAY,EAAE,EAD6D;IAE3EC,WAAW,EAAE;MACTC,MAAM,EAAE,IADC;MAETC,SAAS,EAAE;IAFF;EAF8D,CAMzE;EACFC,OAAO,CAACC,GAAR,CAAY,IAAZ;EACA,IAAIC,GAAG,GAAG,EAAV;EACA,MAAMC,aAAa,GAAI,GAAEX,QAAS,cAAaE,IAAK,WAAUC,YAAY,CAACC,YAAa,EAAxF;;EAEA,IAAID,YAAY,CAACE,WAAjB,EAA8B;IAAA;;IAC1BK,GAAG,GAAI,GAAEC,aAAc,UAAjB,yBAA0BR,YAAY,CAACE,WAAvC,0DAA0B,sBAA0BC,MAAO,WAA3D,0BAAqEH,YAAY,CAACE,WAAlF,2DAAqE,uBAA0BE,SAAU,EAA/G;EACH,CAPC,CAUF;;;EACA,OAAOK,KAAK,CAAE,GAAEF,GAAI,IAAG,0BAAAP,YAAY,CAACU,aAAb,gFAA4BC,MAA5B,IAAqC,CAArC,KAA0CX,YAA1C,aAA0CA,YAA1C,iDAA0CA,YAAY,CAAEU,aAAxD,2DAA0C,uBAA6BE,GAA7B,CAAiCC,MAAM,IAAIA,MAAM,CAACC,QAAP,GAAkB,GAAlB,GAAwBD,MAAM,CAACE,WAA1E,CAA1C,CAAiI,EAA5I,EACN;IACEC,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,UAAU;IAFL;EADX,CADM,CAAL,CAQFC,IARE,CAQG,UAAUC,QAAV,EAAoB;IACtB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACH,CAVE,EAWFF,IAXE,CAWG,UAAUG,MAAV,EAAkB;IACpB,OAAOA,MAAP;EACH,CAbE,CAAP;AAcH,CA/BM;AAkCP,OAAO,MAAMC,YAAY,GAAG,YAAY;EAEpC,OAAOZ,KAAK,CAAC,4BAAD,EACN;IACEO,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,UAAU;IAFL;EADX,CADM,CAAL,CAQFC,IARE,CAQG,UAAUC,QAAV,EAAoB;IACtB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACH,CAVE,EAWFF,IAXE,CAWG,UAAUG,MAAV,EAAkB;IACpB,OAAOA,MAAP;EACH,CAbE,CAAP;AAcH,CAhBM"},"metadata":{},"sourceType":"module"}